'''
Defines basic sqlite3 table schema and table operations
'''

import sqlite3
from typing import Dict, List

from flask import current_app
from .. import exceptions


class Table:
    '''
    Attributes:
        table_name: Name of sqlite3 table
        schema: Defines the structure of the table

    Sqlite3 table implementation
    '''

    def __init__(self, table_name: str, schema: str):
        self._table_name = table_name
        self._schema = schema

    def create_table(self, db: sqlite3.Connection):
        '''
        ARGS:
            db: Instance of database connection

        Delete existing table and create a new one
        '''
        current_app.logger.debug('Creating %s database table', self._table_name)

        try:
            db.executescript(self._schema)
        except sqlite3.Error as err:
            raise exceptions.DBError(err)

    def save(self, db: sqlite3.Connection, **kwargs):
        '''
        ARGS:
            db: Database connection instance

        Formats the sql query and inserts new data into the database.
        Inserts or replaces data in the table appropriately
        '''
        colnames = kwargs.keys()
        cols_sql = '({})'.format(','.join(colnames))   # Ouput : (col1, col2, col3 ...);
        values = kwargs.values()
        values_placeholder = '({})'.format(','.join('?' * len(kwargs)))  # Output: (?, ?, ? ..)
        query = 'INSERT OR REPLACE INTO {t} {c} VALUES {v}'.format(t=self._table_name, c=cols_sql, v=values_placeholder)

        try:
            db.execute(query, (*values, ))
        except sqlite3.Error as err:
            current_app.logger.warning(err)
            current_app.logger.warning('Failed inserting %s into table - %s', values, self._table_name)

    def read_all(self, db: sqlite3.Connection) -> List[Dict]:
        '''
        ARGS:
            db: Database connection instance

        Read all rows from the database
        '''
        try:
            rows = db.execute('SELECT * FROM {table}'.format(table=self._table_name)).fetchall()
        except sqlite3.Error as err:
            raise exceptions.DBError(err)

        row_dict = [dict(row) for row in rows]
        return row_dict
