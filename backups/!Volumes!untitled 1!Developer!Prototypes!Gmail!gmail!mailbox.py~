'''
Provides functionality for parsing emails
'''

import email
import datetime
from collections import namedtuple

from . import exceptions


Email = namedtuple('Email', ['sender', 'subject', 'timestamp', 'body'])


def get_emails(connection, filters='ALL'):
    '''
    ARGS:
        connection: Connection instance for reading emails
        filters: A comma seperated string for filtering out emails
    '''
    resp,  data = connection.search(None, filters)

    if resp != 'OK':
        raise exceptions.MailboxException('An error getting emails for filter  - {}'.format(filters))

    ids = data[0].split()
    return _get_emails_from_ids(connection, ids)


def _get_emails_from_ids(connection, ids):
    emails = []

    for id in ids:
            resp, data = connection.fetch(id, '(RFC822)')  # Allows reading emails

            if resp != 'OK':
                raise exceptions.MailboxException('An error occured reading email for ID - {}'.format(id))

            email = _parse_email(data)
            emails.append(email)

    return emails


def _parse_email(email_data):
    message_str = email_data[0][1].decode('utf8')  # Based on the protocol, contains email data
    email_message = email.message_from_string(message_str)

    maintype = email_message.get_content_maintype()
    content = []

    if maintype == 'multipart':
        for part in email_message.get_payload():
            if part.get_content_maintype() == 'text':
                content.append(part.get_payload())

    elif maintype == 'text':
        content.append(email_message.get_payload())

    subject = email_message['Subject']
    sender = email_message['From']
    timestamp = _parse_email_date(email_message['Date'])
    return Email(subject=subject, sender=sender, timestamp=timestamp, body=content)


def _parse_email_date(email_date):
    datetime_str = email_date.split(',')[1].split('-')[0].strip()
    datetime_obj = datetime.datetime.strptime(datetime_str, '%d %b %Y %H:%M:%S')
    return datetime_obj
