'''
Reads forensic file and compares the keywords in the file with keywords in the
google alerts generated
'''
import io
import os
import smtplib
import itertools
import dropbox
import datetime
import requests

import pandas as pd
from gmail import imap

ALERTS_DAYS = 5

FORENSIC_FOLDER = '/Current forensic file'
FORENSIC_SHEET =  'NEW Follow up'
FORENSIC_HEADER = 3
FORENSIC_COL = 'Drivers'

EMAIL_ADDRESS_LIST = ['ajit.nath@organicgrowthfunds.com']
EMAIL_HOST = 'ns0.ovh.net'
EMAIL_PORT = 587


def read_keywords(
        folder_path=FORENSIC_FOLDER,
        sheet=FORENSIC_SHEET,
        header=FORENSIC_HEADER,
        col=FORENSIC_COL
):
    '''
    ARGS:
        folder_path: Path to folder containing forensic file
        sheet: The sheet containing for keywords
        header: Dataframe header corresponding to the row
        col: Column containing keywords

    Reads keywords from forensic file and returns a list for all keywords
    '''
    kw_df = read_keywords_file(folder_path, sheet, header)
    kw_arr = [str(c) for c in kw_df[col] if pd.notnull(c)]
    kw_list = list(itertools.chain(*[c.split(',') for c in kw_arr]))
    kw_list = [kw.strip().lower() for kw in kw_list]
    return kw_list


def read_keywords_file(folder_path, sheet, header):
    '''
    ARGS:
        folder_path: path to folder containing forensic file
        sheet: Relevant excel sheet to be read
        header: The header of the dataframe corresponding to row of the excel sheet

    Reads the file containing keywords
    '''
    client = dropbox.Dropbox(os.environ.get('DROPBOX_API_TOKEN'))
    file_list = [f for f in client.files_list_folder(folder_path).entries if isinstance(f, dropbox.files.FileMetadata)]
    latest_file = max(file_list, key=lambda f: f.client_modified ).path_lower
    file_link = client.files_get_temporary_link(latest_file).link
    binary_data = requests.get(file_link).content
    io_buffer = io.BytesIO(binary_data)
    df = pd.read_excel(io_buffer, sheet_name=sheet, header=header)
    return df


def get_omitted_alerts(keyword_list, interval=ALERTS_DAYS):
    '''
    ARGS:
        keyword_list: List of keywords to be checked for in emails
        interval: Number of days for which emails have to be checked

    Looks for keywords in emails
    '''
    keyword_set = set(keyword_list)
    email_list = get_emails_by_days(interval)
    email_body_str_list = ['\n'.join(e.body).lower() for e in email_list]  # Converts body parameters to lowercase strings from list of parts

    omitted_keywords = keyword_set.copy()  # Initializes omitted keywords to be the same set as keyword list

    for kw in keyword_set:
        for b in email_body_str_list:
            if kw in b:
                omitted_keywords.remove(kw)
                break

    return list(omitted_keywords)


def get_emails_by_days(days):
    '''
    ARGS:
        days: The number of days to include

    Retrieves emails from the email server
    '''
    since_date = (datetime.datetime.now() - datetime.timedelta(days=days)).date()
    since_str = datetime.datetime.strftime(since_date, '%d-%b-%Y')
    since_filter = '(ALL SINCE {})'.format(since_str).upper()
    conn = imap.connect()
    imap.authenticate(conn, os.environ.get('GMAIL_USERNAME'), os.environ.get('GMAIL_PASSWORD'))
    email_list = imap.get_emails(conn, filters=since_filter)
    return email_list


def generate_notification(keyword_list, address_list=EMAIL_ADDRESS_LIST, interval=ALERTS_DAYS):
    '''
    ARGS:
        keyword_list: The list of keywords to be notified about
        address_list: List of email addresses to send the notification to
        interval: The number of days corresponding to keywords

    Notifies users that the emails have been generated
    '''
    message_fmt_str = 'Subject: Alerts verification\nAlerts checked FROM:  {start_date}\tTO: {end_date}\n\nKeywords omitted\n\n {keywords}'
    sender = 'ajit.nath@organicgrowthfunds.com'

    client = smtplib.SMTP(EMAIL_HOST, EMAIL_PORT)
    client.ehlo()
    client.starttls()
    client.login(os.environ.get('EMAIL_USERNAME'), os.environ.get('EMAIL_PASSWORD'))

    msg = message_fmt_str.format(
        start_date =datetime.datetime.strftime(datetime.datetime.now() - datetime.timedelta(days=interval), '%Y-%m-%d'),
        end_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d'),
        keywords='\n'.join(keyword_list)
    )

    client.sendmail(sender, address_list, msg)
    client.quit()


if __name__ == '__main__':
    print('Getting keywords from forensic fle')
    kw_list = read_keywords()
    print('Getting omitted alerts')
    omitted_kw_list = get_omitted_alerts(kw_list)
    print('Sending out notifications')
    generate_notification(omitted_kw_list)
